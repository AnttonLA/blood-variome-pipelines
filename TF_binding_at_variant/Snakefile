# Define config file
configfile: "config.yaml"

import polars as pl
import os

def get_chr_pos_for_all_snps(variant_file) -> list:
    """
    Get chromosome and position for all SNPs in the variant file. Return list to be used in expand function.

    :param variant_file: Path to the variant file
    :return: List of chromosome and position for all SNPs in the variant file
    """
    if not os.path.exists(variant_file):
        raise FileNotFoundError(f"Variant file {variant_file} not found.")

    df = pl.read_csv(variant_file, sep="\t",has_header=True)
    df = df.with_column(pl.format("{}:{}", pl.col("Chrom").str.replace("chr", ""), pl.col("Pos")).alias("chr_pos"))

    # Extract chr_pos to a list and return it
    return df.get_column("chr_pos").to_list()


chr_pos_list = get_chr_pos_for_all_snps(config["variant_file"])

# Rule to generate the output file(s)
rule all:
    input:
        #expand(config["remap_output_dir"]+"/remap_studies_{chr_pos}.txt", chr_pos=chr_pos_list),
        #config["perfectos_ape_output_file"],
        config['output_file']


# Extract the entries relevant to our variants from the ReMap database
rule extract_remap_entries:
    input:
        config["variant_file"]
    params:
        remap_file = config["remap_data_file"],
        tmp_dir = config["tmp_folder"],
        remap_output_dir = config["remap_output_dir"]
    output:
        expand(config["remap_output_dir"]+"remap_studies_{chr_pos}.txt", chr_pos=chr_pos_list)
    shell:
        "python remap_lookup_for_full_snplist.py \
        -s {input} -r {params.remap_file} -t {params.tmp_dir} -o {params.remap_output_dir}"


# Get all the TF motifs broken by the variant
rule perfectos_ape_lookup:
    input:
        config["variant_file"]
    params:
        hg38_fa = config["hg38_fa_file"],
        hocmomoco = "perfectos_ape/pwm/hocomoco_11_human",
        samtools = "/home/antton/Programs/samtools-1.17/samtools",
        temp_dir = config["tmp_folder"]
    output:
        config["perfectos_ape_output_file"]
    shell:
        "python perfectos_ape/run_perfectos_hocomoco.py \
        --snplist {input} \
        --ref {params.hg38_fa} \
        --hocomoco {params.hocmomoco} \
        --samtools {params.samtools} \
        --temp_dir {params.temp_dir} \
        -o {output}"

rule find_tfs_in_both:
    input:
        expand(config["remap_output_dir"] + "remap_studies_{chr_pos}.txt",chr_pos=chr_pos_list),
        config["perfectos_ape_output_file"]
    params:
        remap_out_dir = config["remap_output_dir"],
        perfectos_output = config["perfectos_ape_output_file"],
    output:
        config['output_file']
    shell:
        "python find_double_evidence_tfs.py -r {params.remap_out_dir} -p {params.perfectos_output} -o {output}"
