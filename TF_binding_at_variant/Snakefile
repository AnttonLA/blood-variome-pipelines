# Define config file
configfile: "config.yaml"

import polars as pl
import os

def get_chr_pos_for_all_snps(variant_file: str) -> list:
    """
    Get chromosome and position for all SNPs in the variant file. Return list to be used in expand function.

    :param variant_file: Path to the variant file
    :return: List of chromosome and position for all SNPs in the variant file
    """
    if not os.path.exists(variant_file):
        raise FileNotFoundError(f"Variant file {variant_file} not found.")

    df = pl.read_csv(variant_file, separator="\t", has_header=True, dtypes={"Chrom": pl.Utf8, "Pos": pl.Utf8})
    df = df.with_columns([pl.format("{}:{}", pl.col("Chrom").str.replace("chr", ""), pl.col("Pos")).alias("chr_pos")])

    # Extract chr_pos to a list and return it
    return df.get_column("chr_pos").unique().to_list()


chr_pos_list = get_chr_pos_for_all_snps(config["variant_file"])

# Rule to generate the output file(s)
rule all:
    input:
        expand(os.path.join(config["remap_tmp_output_dir"], "remap_studies_{chr_pos}.txt"), chr_pos=chr_pos_list),
        config["remap_output_file"],
        os.path.join(config["tmp_folder"], "FABIAN_INPUT_1.vcf"),
        os.path.join(config["tmp_folder"],os.path.basename(config["variant_file"]) + ".map"),
        os.path.join(config["output_folder"],"fabian_output_data.processed"),
        os.path.join(config["output_folder"],"fabian_output_table.processed"),
        config['output_file']


rule extract_remap_entries:
    """
    Extract the entries relevant to our variants from the ReMap database. It will produce one file per genomic position.
    """
    input:
        config["variant_file"]
    params:
        remap_file = config["remap_data_file"],
        tmp_dir = config["tmp_folder"],
        remap_output_dir = config["remap_tmp_output_dir"]
    output:
        expand(os.path.join(config["remap_tmp_output_dir"], "remap_studies_{chr_pos}.txt"), chr_pos=chr_pos_list)
    message:
        "Extracting ReMap entries for all variants in {input}"
    shell:
        "python remap_lookup_for_full_snplist.py \
        -s {input} -r {params.remap_file} -t {params.tmp_dir} -o {params.remap_output_dir}"


rule compose_remap_lookup_output_file:
    """
    Combine all the individual ReMap lookup files into one file. Then filter the file keeping only the biotypes
    specified in the config file 'filters_str' argument.
    """
    input:
        expand(os.path.join(config["remap_tmp_output_dir"], "remap_studies_{chr_pos}.txt"), chr_pos=chr_pos_list)
    params:
        remap_tmp_output_dir = config["remap_tmp_output_dir"],
        filters = config["filter_file"],
    output:
        config["remap_output_file"]
    message:
        "Composing final ReMap output file"
    shell:
        "python produce_final_remap_output.py -d {params.remap_tmp_output_dir} -f {params.filters} -o {output}"


rule create_fabian_input_vcf:
    """
    Create the input VCF file(s) needed for FABIAN-variant.
    """
    input:
        config["variant_file"]
    params:
        out_dir = config["tmp_folder"],
    output:
        os.path.join(config["tmp_folder"], "FABIAN_INPUT_1.vcf"),
        os.path.join(config["tmp_folder"], os.path.basename(config["variant_file"]) + ".map"),
    message:
        "Creating input VCF file(s) and map file for FABIAN-variant"
    shell:
        "python variant_list_to_fabian_input_vcf.py {input} -o {params.out_dir}"


rule process_fabian_output:
    """
    Process the output from FABIAN-variant. There are two files: _data and _table. The _data file contains the
    full output from FABIAN while the _table file contains only the consensus scores for each variant.
    """
    input:
        os.path.join(config["tmp_folder"],os.path.basename(config["variant_file"]) + ".map"),
    params:
        fabian_output_data = config["fabian_output_data"],
        fabian_output_table = config["fabian_output_table"],
        output_folder = config["output_folder"],
    output:
        os.path.join(config["output_folder"], "fabian_output_data.processed"),
        os.path.join(config["output_folder"], "fabian_output_table.processed"),
    shell:
        "python process_fabian_output.py -t {params.fabian_output_table} -d {params.fabian_output_data} -m {input} -o {params.output_folder}"


rule find_double_evidence_tfs:
    """
    Find the TFs that are present in both ReMap and FABIAN-variant.
    """
    input:
        config["remap_output_file"],
        os.path.join(config["output_folder"], "fabian_output_data.processed")
    params:
        remap_out_dir = config["remap_output_file"],
        fabian_output = os.path.join(config["output_folder"], "fabian_output_data.processed"),
    output:
        config['output_file']
    message:
        "Checking for TFs in both ReMap and FABIAN-Variant"
    shell:
        "python find_double_evidence_tfs.py -r {params.remap_out_dir} -f {params.fabian_output} -o {output}"
