import os

configfile: "config.yaml"

# Initialize directory structure
if 'data' not in os.listdir(config['global_project_dir']):
    os.mkdir(config['global_project_dir'] + '/data')
if 'raw' not in os.listdir(config['global_project_dir'] + '/data'):
    os.mkdir(config['global_project_dir'] + '/data/raw')
if 'intermediate' not in os.listdir(config['global_project_dir'] + '/data'):
    os.mkdir(config['global_project_dir'] + '/data/intermediate')
if 'processed' not in os.listdir(config['global_project_dir'] + '/data'):
    os.mkdir(config['global_project_dir'] + '/data/processed')

# Create run-specific directories
if config['name_of_run'] not in os.listdir(config['global_project_dir'] + '/data/raw'):
    os.mkdir(config['global_project_dir'] + '/data/raw/' + config['name_of_run'])
if config['name_of_run'] not in os.listdir(config['global_project_dir'] + '/data/intermediate'):
    os.mkdir(config['global_project_dir'] + '/data/intermediate/' + config['name_of_run'])
if config['name_of_run'] not in os.listdir(config['global_project_dir'] + '/data/processed'):
    os.mkdir(config['global_project_dir'] + '/data/processed/' + config['name_of_run'])

# Global path variables
raw_data_dir = config['global_project_dir'] + 'data/raw/' + config['name_of_run'] + '/'
intermediate_data_dir = config['global_project_dir'] + 'data/intermediate/' + config['name_of_run'] + '/'
processed_data_dir = config['global_project_dir'] + 'data/processed/' + config['name_of_run'] + '/'

rule all:
    input:
        intermediate_data_dir + 'variant_list.gor',
        processed_data_dir + 'eqtl_test_2.gor'


rule convert_variant_list_to_gor:
    """ 
    Convert the variant list file to .gor format. This is the list containing our GWAS variants that we want to assign
    genes to. 
    """
    input:
        config['variant_file']
    output:
        intermediate_data_dir + 'variant_list.gor'
    shell:
        "python convert_to_gor.py {input} --chr_col chromosome --pos_col position --additional_cols 'OA, EA, EAF, beta, pval, Marker, phenotype' -o {output}"


rule immunexut_lookup:
    """
    Look up our variants in the ImmuNexUT database. If any of them have eQTLs for any cell type in the database, we will
    record them in the output file.
    """
    input:
        intermediate_data_dir + 'variant_list.gor'
    params:
        immunexut = config["immunexut_dir"] + "combined_immunexut.gorz"
    output:
        processed_data_dir + 'eqtl_test_2.gor'
    shell:
        config['gorpipe_path'] + " 'gor {input} | SORT genome \
        | VARJOIN {params.immunexut} -refl OA -altl EA -refr OA -altr EA \
        | SELECT #Chrom,Pos,Variant_position_end,OA,EA,EAF,beta,pval,Marker,phenotype,Gene_name,Forward_nominal_P,Source \
        | RENAME Gene_name immunexut_gene | RENAME Forward_nominal_P immunexut_pval | RENAME Source immunexut_celltype\
        | write {output}'"


#rule eqtl_catalogue_lookup:
#    input:
