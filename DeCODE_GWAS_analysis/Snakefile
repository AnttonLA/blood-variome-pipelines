import numpy as np
import os

configfile: "config.yaml"


# Initialize directory structure
if 'data' not in os.listdir(config['global_project_dir']):
    os.mkdir(config['global_project_dir'] + '/data')
if 'raw' not in os.listdir(config['global_project_dir'] + '/data'):
    os.mkdir(config['global_project_dir'] + '/data/raw')
if 'intermediate' not in os.listdir(config['global_project_dir'] + '/data'):
    os.mkdir(config['global_project_dir'] + '/data/intermediate')
if 'processed' not in os.listdir(config['global_project_dir'] + '/data'):
    os.mkdir(config['global_project_dir'] + '/data/processed')

# Create run-specific directories
if config['name_of_gwas_run'] not in os.listdir(config['global_project_dir'] + '/data/raw'):
    os.mkdir(config['global_project_dir'] + '/data/raw/' + config['name_of_gwas_run'])
if config['name_of_gwas_run'] not in os.listdir(config['global_project_dir'] + '/data/intermediate'):
    os.mkdir(config['global_project_dir'] + '/data/intermediate/' + config['name_of_gwas_run'])
if config['name_of_gwas_run'] not in os.listdir(config['global_project_dir'] + '/data/processed'):
    os.mkdir(config['global_project_dir'] + '/data/processed/' + config['name_of_gwas_run'])

# Global path variables
raw_data_dir = config['global_project_dir'] + 'data/raw/' + config['name_of_gwas_run'] + '/Frequency_and_Ratio/'
intermediate_data_dir = config['global_project_dir'] + 'data/intermediate/' + config['name_of_gwas_run'] + '/Frequency_and_Ratio/'
processed_data_dir = config['global_project_dir'] + 'data/processed/' + config['name_of_gwas_run'] + '/Frequency_and_Ratio/'

if not os.path.exists(raw_data_dir):
    os.makedirs(raw_data_dir)
if not os.path.exists(intermediate_data_dir):
    os.makedirs(intermediate_data_dir)
if not os.path.exists(processed_data_dir):
    os.makedirs(processed_data_dir)

# Other necessary directories
if 'hits_only_sumstats' not in os.listdir(intermediate_data_dir):
    os.mkdir(intermediate_data_dir + 'hits_only_sumstats')

config['pval_thresh'] = float(config['pval_thresh'])  # '1e-4' is read as a string, so we need to convert it to float
pval_thresh_exponent = str(-np.log10(config['pval_thresh']))  # Exponent of p-value threshold as a string
pval_thresh_str = '10E' + pval_thresh_exponent

phenotype_list = ['_'.join(gwas_file.rstrip('.txt').split('_')[4:-3]) for gwas_file in os.listdir(config['gwas_gzip_folder'])[:]]
print(phenotype_list)


rule all:
    input:
        # Copied and gunzipped files. "raw" data.
        expand(raw_data_dir + 'SWE_Swedes_Blood_variome_{phenotype}_adjSexPhaCohPC_InvNorm_12102022.res', phenotype=phenotype_list),
        # Individual hit tables per phenotype
        expand(intermediate_data_dir + 'hits_only_sumstats/{phenotype}.txt', phenotype=phenotype_list),
        # All hits table
        processed_data_dir + config['name_of_gwas_run'] +'_hits_only_' + pval_thresh_str + '_one_pheno_only_per_variant.txt',
        # Combined summary stats table for plotting
        processed_data_dir + 'combined_manhattan.txt'


# TODO: Copy the 'variant_info_extended.txt' file as well so that we don't need to read it from cbio3. Will need to change the config file too.
rule copy_and_unzip_gwas_files:
    input:
        config['gwas_gzip_folder'] + 'SWE_Swedes_Blood_variome_{phenotype}_adjSexPhaCohPC_InvNorm_12102022.res.gz'
    params:
         bare_copy = raw_data_dir + 'SWE_Swedes_Blood_variome_{phenotype}_adjSexPhaCohPC_InvNorm_12102022.res.gz'
    output:
        raw_data_dir + 'SWE_Swedes_Blood_variome_{phenotype}_adjSexPhaCohPC_InvNorm_12102022.res'
    shell:
        'cp {input} {params.bare_copy}; gunzip {params.bare_copy}'


rule extract_significant_variants:
    input:
        config['var_info_folder'] + "variant_info_extended.txt",
        expand(raw_data_dir + 'SWE_Swedes_Blood_variome_{phenotype}_adjSexPhaCohPC_InvNorm_12102022.res', phenotype=phenotype_list)
    params:
        var_info_file = config['var_info_folder'] + "variant_info_extended.txt",
        input_dir = raw_data_dir[:-1],
        pval = -np.log10(config['pval_thresh']),
        output_dir = intermediate_data_dir + 'hits_only_sumstats'
    output:
        expand(intermediate_data_dir + 'hits_only_sumstats/{phenotype}.txt', phenotype=phenotype_list)
    shell:
        "python extract_variants_by_pval.py {params.var_info_file} {params.input_dir} -p {params.pval} -o {params.output_dir}"


# TODO: This rule is sometimes launched before the copying & unzipping rule is finished. Need to fix this.
rule generate_hits_table:
    input:
        expand(intermediate_data_dir  + 'hits_only_sumstats/{phenotype}.txt', phenotype = phenotype_list)
    params:
        gwas_run_name = config['name_of_gwas_run'],
        input_dir = intermediate_data_dir + 'hits_only_sumstats',
        output_dir = processed_data_dir,
        pval_thresh_exponent = pval_thresh_exponent
    output:
        processed_data_dir + config['name_of_gwas_run'] +'_hits_only_' + pval_thresh_str + '_one_pheno_only_per_variant.txt'
    shell:
        "python produce_all_hits_table.py {params.input_dir} {params.gwas_run_name} -p {params.pval_thresh_exponent} -o {params.output_dir}"


# TODO: This takes stupidly long. It might be good enough to just copy the template from somewhere if it exists.
rule generate_template_manhattan:
    input:
        config['var_info_folder'] + "variant_info_extended.txt",
        raw_data_dir
    params:
        output_dir = intermediate_data_dir[:-1]
    output:
        intermediate_data_dir + 'template_manhattan.txt'
    shell:
        "python produce_full_sumstats_for_single_trait.py {input} -o {params.output_dir}"


rule generate_combined_manhattan:
    input:
        intermediate_data_dir + 'template_manhattan.txt',
        processed_data_dir + config['name_of_gwas_run'] +'_hits_only_' + pval_thresh_str + '_one_pheno_only_per_variant.txt'
    params:
        output_dir = processed_data_dir[:-1]
    output:
        processed_data_dir + 'combined_manhattan.txt'
    shell:
        "python swap_in_hits_into_template_sumstats_file.py {input} -o {params.output_dir}"